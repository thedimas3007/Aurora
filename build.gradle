import groovy.json.JsonSlurper
import org.jooq.codegen.DefaultGeneratorStrategy
import org.jooq.codegen.GenerationTool
import org.jooq.meta.Definition
import org.jooq.meta.DefaultDataTypeDefinition
import org.jooq.meta.jaxb.*
import org.jooq.tools.StringUtils

buildscript {
    ext {
        jooqVersion = '3.17.0'
        mysqlVersion = '8.0.30'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq:$jooqVersion" // older version due to older MySQL version on the host
        classpath "org.jooq:jooq-codegen:$jooqVersion"
        classpath "org.jooq:jooq-meta:$jooqVersion"
        classpath "mysql:mysql-connector-java:$mysqlVersion"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
java.sourceCompatibility = '17'

group = 'thedimas'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass = 'thedimas.aurora.AuroraApplication'
}

ext {
    lombokVersion = '1.18.28'
    springVersion = '3.1.3'
    springTxVersion = '6.0.11'
    mysqlVersion = '8.0.30'
    jooqVersion = '3.17.0'
    hikariVersion = '5.0.1'
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly "org.projectlombok:lombok$lombokVersion"

    implementation "org.springframework.shell:spring-shell-starter:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springVersion"
    implementation "org.springframework.data:spring-data-jdbc:$springVersion"
    implementation "org.springframework:spring-tx:$springTxVersion"
    developmentOnly "org.springframework.boot:spring-boot-devtools:$springVersion"

    implementation "org.jooq:jooq:$jooqVersion"
    implementation "com.zaxxer:HikariCP:$hikariVersion"
    runtimeOnly "mysql:mysql-connector-java:$mysqlVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springVersion"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.shell:spring-shell-dependencies:$springVersion"
    }
}

tasks.register('codegen') {
    doLast {
        var host, schema, user, password
        if (!project.hasProperty("dbhost") || !project.hasProperty("dbschema") || !project.hasProperty("dbuser") || !project.hasProperty("dbpassword")) {
            if (file("./database.json").exists()) {
                println("Using local JSON config")
                var json = new JsonSlurper()
                var dbFile = file("./database.json")
                var db = json.parseText(dbFile.text)

                host = db.host
                schema = db.schema
                user = db.username
                password = db.password
            } else {
                println("\u001B[33;1mWARNING!\u001B[0m No DB config. Compiling may fail due to lack of `gen` packet")
                return
            }
        } else {
            host = project.property("dbhost")
            schema = project.property("dbschema")
            user = project.property("dbuser")
            password = project.property("dbpassword")
        }
        println(sourceSets.main.java.srcDirs.first().path)
        Configuration configuration = new Configuration()
                .withJdbc(new Jdbc()
                        .withDriver("com.mysql.cj.jdbc.Driver")
                        .withUrl("jdbc:mysql://$host:3306/$schema")
                        .withUser("$user")
                        .withPassword("$password")
                )
                .withGenerator(new Generator()
                        .withDatabase(new Database()
                                .withName("org.jooq.meta.mysql.MySQLDatabase")
                                .withIncludes(".*")
                                .withExcludes("")
                                .withInputSchema("$schema")
                                .withForcedTypes(
                                        new ForcedType()
                                                .withName("BOOLEAN")
                                                .withIncludeTypes("(?i:TINYINT)")
                                )
                        )
                        .withTarget(new Target()
                                .withPackageName("thedimas.aurora.database.gen")
                                .withDirectory(sourceSets.main.java.srcDirs.first().path)
                        )
                        .withGenerate(new Generate()
                                .withFluentSetters(true)
                                .withPojos(true)
                                .withPojosEqualsAndHashCode(true)
                                .withPojosToString(true)
                                .withDaos(true)
                                .withSpringDao(true)
                                .withSpringAnnotations(true)
                        )
                )

        GenerationTool.generate(configuration)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
